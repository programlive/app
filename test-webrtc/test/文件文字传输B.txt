<html>
<body>
    B: <br>
  <div id="container">
    <div id="buttons">
       <button id="startButtonB">StartB</button>
      <button id="sendButton" disabled>Send</button>
      <button id="closeButton" disabled>Stop</button>
    </div>
    <div id="sendReceive">
      <div id="send">
        <h2>Send</h2>
        <textarea id="dataChannelSend"  disabled placeholder="Press Start, enter some text, then press Send."></textarea>
      </div>
      <div id="receive">
        <h2>Receive</h2>
        <textarea id="dataChannelReceive" disabled></textarea>
      </div>
    </div>
  </div>
    <section style="margin: 10 0 10 0;background:#faaa1a">
      <form id="fileInfo">
        <input type="file" id="fileInput" name="files"/>
      </form>

      <div class="progress" >
        <div class="label">Send progress: </div>
        <progress id="sendProgress" max="0" value="0" style="width:80%;"></progress>
      </div>
      <div class="progress">
        <div class="label">Receive progress: </div>
        <progress id="receiveProgress" max="0" value="0" style="width:80%;"></progress>
      </div>

      <div id="bitrate"></div>
      <a id="download"></a>
      <span id="status"></span>

    </section>
  
  
  
      <div id="swap">
        <h2>swap area</h2>
        <textarea id="SwapArea" style="height:500px;width:100%;"></textarea>
      </div>
      <script src="http://app.ruizhen.net/test-webrtc/adapter.js"></script>
    <script src="http://app.ruizhen.net/test-webrtc/common.js"></script>
    <script>
            //-----------------------------------------------------transfer a file------------------------------
var bitrateDiv = document.querySelector('div#bitrate');
var fileInput = document.querySelector('input#fileInput');
var downloadAnchor = document.querySelector('a#download');
var sendProgress = document.querySelector('progress#sendProgress');
var receiveProgress = document.querySelector('progress#receiveProgress');
var statusMessage = document.querySelector('span#status');
var receiveBuffer = [];
var receivedSize = 0;
var bytesPrev = 0;
var timestampPrev = 0;
var timestampStart;
var statsInterval = null;
var bitrateMax = 0;
      //fileInput.addEventListener('change', sendDataFile, false);
     //-----------------------------------------------------transfer a file------------------------------
       var xmlhttp;
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp1=new XMLHttpRequest();
      xmlhttp2=new XMLHttpRequest();
      xmlhttp3=new XMLHttpRequest();
  }
      var pc;
      var sendChannel;
    
      var iceone=1;
      var ajaxSend=1;
      var display123;

      var dataChannelSend = document.querySelector('textarea#dataChannelSend');
var receiveChannel;
var dataChannelReceive = document.querySelector('textarea#dataChannelReceive');
var SwapArea = document.querySelector('textarea#SwapArea');
      var startButtonB = document.querySelector('button#startButtonB');
var sendButton = document.querySelector('button#sendButton');
var closeButton = document.querySelector('button#closeButton');
startButtonB.onclick = createConnection;
sendButton.onclick = sendData;
closeButton.onclick = closeDataChannels;
        // 仅仅用于控制哪一端的浏览器发起offer，#号后面有值的一方发起
      //   var isCaller = window.location.href.split('#')[1];
 var isCaller =0;
        // 与信令服务器的WebSocket连接
      // var socket = new WebSocket("ws://127.0.0.1:3000");
        // stun和turn服务器
        var iceServer = {
            "iceServers": [{
                "urls": "stun:stun.l.google.com:19302"
            }, {
                "urls": "turn:numb.viagenie.ca",
                "username": "webrtc@live.com",
                "credential": "muazkh"
            }]
        };
       function createConnection()
      {
   display123="";
        // 创建PeerConnection实例 (参数为null则没有iceserver，即使没有stunserver和turnserver，仍可在局域网下通讯)
        pc = new RTCPeerConnection(null);
        // 发送ICE候选到其他客户端
        pc.onicecandidate = function(event){
          if (event.candidate !== null && iceone == 1) {//iceone = 0;
          
               display123 += ","+JSON.stringify({"event": "an_ice_candidate", "data": { "candidate": event.candidate} });
              console.log("ice");
          
             SEND("ice",display123);
            }
        };
        // 如果检测到媒体流连接到本地，将其绑定到一个video标签上输出
        pc.ontrack = function(event){
          console.log(event);
        };
           sendChannel = pc.createDataChannel('sendDataChannel',null);
  console.log('Created send data channel');
                  if(isCaller){
              CLEAN();
                pc.createOffer(sendOfferFn, function (error) {
                    console.log('Failure callback: ' + error);
                });
            }
              pc.ondatachannel = receiveChannelCallback;
   sendChannel.onopen = onSendChannelStateChange;
  sendChannel.onclose = onSendChannelStateChange;
          UPDATE();
      }
        // 发送offer和answer的函数，发送本地session描述
        var sendOfferFn = function(desc){
            pc.setLocalDescription(desc);
            display123 += JSON.stringify({ "event": "_offer", "data": {"sdp": desc }});
          console.log("offersdp");
          SEND("offersdp",display123);
        },
        sendAnswerFn = function(desc){
            pc.setLocalDescription(desc);
            display123 += JSON.stringify({  "event": "_answer", "data": { "sdp": desc} });
        console.log("answersdp");
          SEND("answersdp",display123);
        };

function onSendChannelStateChange() {
  var readyState = sendChannel.readyState;
  trace('Send channel state is: ' + readyState);
  if (readyState === 'open') {
    dataChannelSend.disabled = false;
    // dataChannelReceive.disabled = false;
    dataChannelSend.focus();
    sendButton.disabled = false;
    closeButton.disabled = false;
  } else {
    dataChannelSend.disabled = true;
    sendButton.disabled = true;
  }
}
   
      function onAddIceCandidateSuccess() {
  trace('AddIceCandidate success.');
}

function onAddIceCandidateError(error) {
  trace('Failed to add Ice Candidate: ' + error.toString());
}
     
      
     function onCreateSessionDescriptionError(error) {
  trace('Failed to create session description: ' + error.toString());
}

function sendData() {
  var data = dataChannelSend.value;
  sendChannel.send(data);
  trace('Sent Data: ' + data);
}
      function receiveChannelCallback(event) {
  trace('Receive Channel Callback');
  receiveChannel = event.channel;
  receiveChannel.onmessage = onReceiveMessageCallback;
  receiveChannel.onopen = onReceiveChannelStateChange;
  receiveChannel.onclose = onReceiveChannelStateChange;
}
     /*    
      function onReceiveMessageCallback(event) {
  trace('Received Message');
  dataChannelReceive.value = event.data;
      }*/
      //----------------------------------------------------transfer a file------------------------------    
   var fileAttribute;
      function onReceiveMessageCallback(event) {
 console.log(typeof event.data);
          if(typeof event.data == "string"){
         fileAttribute = JSON.parse(event.data);
        console.log(fileAttribute.name);
            if(!fileAttribute.name){
              trace('Received Message');
  dataChannelReceive.value = event.data;}
return;}
   trace('Received Message ' + event.data.size);
  receiveBuffer.push(event.data);
  receivedSize += event.data.size;
  receiveProgress.max = fileAttribute.size;
  receiveProgress.value = receivedSize;

  // we are assuming that our signaling protocol told
  // about the expected file size (and name, hash, etc).
 
  if (receivedSize === fileAttribute.size) {
    var received = new window.Blob(receiveBuffer);
    receiveBuffer = [];
    receivedSize = 0;
   
    downloadAnchor.href = URL.createObjectURL(received);
    downloadAnchor.download = fileAttribute.name;
    downloadAnchor.textContent =
      'Click to download \'' + fileAttribute.name + '\' (' + fileAttribute.size + ' bytes)';
    downloadAnchor.style.display = 'block';

    var bitrate = Math.round(receivedSize * 8 /
        ((new Date()).getTime() - timestampStart));
    bitrateDiv.innerHTML = '<strong>Average Bitrate:</strong> ' +
        bitrate + ' kbits/sec (max: ' + bitrateMax + ' kbits/sec)';
     fileAttribute = "";
    if (statsInterval) {
      window.clearInterval(statsInterval);
      statsInterval = null;
    }
  }
}
     
      
           //-----------------------------------------------------transfer a file------------------------------    
      
      
     
      function onReceiveChannelStateChange() {
  var readyState = receiveChannel.readyState;
  trace('Receive channel state is: ' + readyState);
}
 
    
function closeDataChannels() {
  trace('Closing data channels');
  sendChannel.close();
  trace('Closed data channel with label: ' + sendChannel.label);
  receiveChannel.close();
  trace('Closed data channel with label: ' + receiveChannel.label);
  pc.close();
  pc = null;
  trace('Closed peer connections');
  startButtonB.disabled = false;
  sendButton.disabled = true;
  closeButton.disabled = true;
  dataChannelSend.value = '';
  dataChannelReceive.value = '';
  dataChannelSend.disabled = true;
  disableSendButton();
  enableStartButton();
} 

    
      function enableStartButton() {
  startButtonB.disabled = false;
}
function disableSendButton() {
  sendButton.disabled = true;
}

    function SEND(name,swap)
{ 
  SwapArea.value="["+swap+"]";
  xmlhttp1.open("POST","http://app.ruizhen.net/test-webrtc/test.php",true);
xmlhttp1.setRequestHeader("Content-type","application/x-www-form-urlencoded");
  xmlhttp1.send("function=send&name="+name+"&message="+ encodeURIComponent(SwapArea.value));
  //一定一定记得用这函数编码，js会把+&等符号理解为操作符，以空格替换
  //console.log("send: "+SwapArea.value);
}
       function CLEAN()
{ 
  console.log("clean");
SwapArea.innerHTML="";
}
      var iceread=0;
    function UPDATE()
      {  if(SwapArea.value){readsdpice();return;}
xmlhttp3.open("POST","http://app.ruizhen.net/test-webrtc/test.php",true);
xmlhttp3.setRequestHeader("Content-type","application/x-www-form-urlencoded");
xmlhttp3.send("function=update");
xmlhttp3.onreadystatechange=function()
  { 
    if (xmlhttp3.readyState==4 && xmlhttp3.status==200)
    {     
     CLEAN();
  SwapArea.value = decodeURIComponent(xmlhttp3.responseText);//对应解码函数
       readsdpice();
      }}
  } 
    function readsdpice()
      {
      var json = JSON.parse(SwapArea.value);
    var i=0;
      for(i in json){
        var sdpice = json[i];
      console.log(sdpice);
          //如果是一个ICE的候选，则将其加入到PeerConnection中，否则设定对方的session描述为传递过来的描述
        if( sdpice.event === "of_ice_candidate" && iceread ==1){//iceread =3;
                                          console.log('onmessage: ',sdpice.event);
                 pc.addIceCandidate(new RTCIceCandidate(sdpice.data.candidate)).then(
 onAddIceCandidateSuccess,
      onAddIceCandidateError
              );
        } else if( sdpice.event === "_offer" && iceread ==0 ) {iceread=1;
       pc.setRemoteDescription(new RTCSessionDescription(sdpice.data.sdp));
   pc.createAnswer(sendAnswerFn, function (error) {console.log('Failure callback: ' + error);});
          }
      }
      }
    </script>
</body>
</html>