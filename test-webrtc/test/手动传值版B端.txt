<html>
<body>
    B: <br>
  <div id="container">
    <div id="buttons">
       <button id="startButtonB">StartB</button>
     <button id="readButton" >readsdp</button>
  <button id="readiceButton" >readice</button>
      <button id="sendButton" disabled>Send</button>
      <button id="closeButton" disabled>Stop</button>
    </div>
    <div id="sendReceive">
      <div id="send">
        <h2>Send</h2>
        <textarea id="dataChannelSend"  disabled placeholder="Press Start, enter some text, then press Send."></textarea>
      </div>
      <div id="receive">
        <h2>Receive</h2>
        <textarea id="dataChannelReceive" disabled></textarea>
      </div>
    </div>
  </div>
      <div id="swap">
        <h2>swap area</h2>
        <textarea id="SwapArea" style="height:500px;width:100%;"></textarea>
      </div>
      <script src="http://app.ruizhen.net/test-webrtc/adapter.js"></script>
    <script src="http://app.ruizhen.net/test-webrtc/common.js"></script>
    <script>
       var xmlhttp;
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp1=new XMLHttpRequest();
      xmlhttp2=new XMLHttpRequest();
      xmlhttp3=new XMLHttpRequest();
     xmlhttp4=new XMLHttpRequest();
     xmlhttp5=new XMLHttpRequest();
  }
      var pc;
      var sendChannel;
    
      var iceone=1;
      var ajaxSend=1;
      var display123;
      var readButton = document.querySelector('button#readButton');
      readButton.onclick = UPDATE;
            var readiceButton = document.querySelector('button#readiceButton');
       readiceButton.onclick = UPDATEice;
      var dataChannelSend = document.querySelector('textarea#dataChannelSend');
var receiveChannel;
var dataChannelReceive = document.querySelector('textarea#dataChannelReceive');
var SwapArea = document.querySelector('textarea#SwapArea');
      var startButtonB = document.querySelector('button#startButtonB');
var sendButton = document.querySelector('button#sendButton');
var closeButton = document.querySelector('button#closeButton');
startButtonB.onclick = createConnection;
sendButton.onclick = sendData;
closeButton.onclick = closeDataChannels;
        // 仅仅用于控制哪一端的浏览器发起offer，#号后面有值的一方发起
      //   var isCaller = window.location.href.split('#')[1];
 var isCaller =0;
        // 与信令服务器的WebSocket连接
      // var socket = new WebSocket("ws://127.0.0.1:3000");

        // stun和turn服务器
        var iceServer = {
            "iceServers": [{
                "urls": "stun:stun.l.google.com:19302"
            }, {
                "urls": "turn:numb.viagenie.ca",
                "username": "webrtc@live.com",
                "credential": "muazkh"
            }]
        };
       function createConnection()
      {
   display123="";
        // 创建PeerConnection实例 (参数为null则没有iceserver，即使没有stunserver和turnserver，仍可在局域网下通讯)
        pc = new RTCPeerConnection(null);
        // 发送ICE候选到其他客户端
        pc.onicecandidate = function(event){
          if (event.candidate !== null && iceone == 1) {//iceone = 0;
               display123 += ","+JSON.stringify({"event": "an_ice_candidate", "data": { "candidate": event.candidate} });
              console.log("ice:"+display123);
          
             SEND("ice",display123);
            }
        };
        // 如果检测到媒体流连接到本地，将其绑定到一个video标签上输出
        pc.ontrack = function(event){
          console.log(event);
      
        };
     
           sendChannel = pc.createDataChannel('sendDataChannel',null);
  console.log('Created send data channel');
                  if(isCaller){
              CLEAN();
                pc.createOffer(sendOfferFn, function (error) {
                    console.log('Failure callback: ' + error);
                });
            }
              pc.ondatachannel = receiveChannelCallback;
   sendChannel.onopen = onSendChannelStateChange;
  sendChannel.onclose = onSendChannelStateChange;
      
      }
        // 发送offer和answer的函数，发送本地session描述
        var sendOfferFn = function(desc){
            pc.setLocalDescription(desc);
            display123 += JSON.stringify({ "event": "_offer", "data": {"sdp": desc }});
          console.log("offersdp"+display123);
          SEND("offersdp",display123);
        },
        sendAnswerFn = function(desc){
            pc.setLocalDescription(desc);
            display123 += JSON.stringify({  "event": "_answer", "data": { "sdp": desc} });
        
          SEND("answersdp",display123);
        };


function onSendChannelStateChange() {
  var readyState = sendChannel.readyState;
  trace('Send channel state is: ' + readyState);
  if (readyState === 'open') {
    CLEAN();
    dataChannelSend.disabled = false;
    // dataChannelReceive.disabled = false;
    dataChannelSend.focus();
    sendButton.disabled = false;
    closeButton.disabled = false;
  } else {
    dataChannelSend.disabled = true;
    sendButton.disabled = true;
  }
}
    
      function onAddIceCandidateSuccess() {
  trace('AddIceCandidate success.');
}

function onAddIceCandidateError(error) {
  trace('Failed to add Ice Candidate: ' + error.toString());
}
     
      
     function onCreateSessionDescriptionError(error) {
  trace('Failed to create session description: ' + error.toString());
}

function sendData() {
  var data = dataChannelSend.value;
  sendChannel.send(data);
  trace('Sent Data: ' + data);
}
      function receiveChannelCallback(event) {
  trace('Receive Channel Callback');
  receiveChannel = event.channel;
  receiveChannel.onmessage = onReceiveMessageCallback;
  receiveChannel.onopen = onReceiveChannelStateChange;
  receiveChannel.onclose = onReceiveChannelStateChange;
}
     
      function onReceiveMessageCallback(event) {
  trace('Received Message');
  dataChannelReceive.value = event.data;
}
      function onReceiveChannelStateChange() {
  var readyState = receiveChannel.readyState;
  trace('Receive channel state is: ' + readyState);
}
      
      
function closeDataChannels() {
  trace('Closing data channels');
  sendChannel.close();
  trace('Closed data channel with label: ' + sendChannel.label);
  receiveChannel.close();
  trace('Closed data channel with label: ' + receiveChannel.label);
  pc.close();
  pc = null;
  trace('Closed peer connections');
  startButtonB.disabled = false;
  sendButton.disabled = true;
  closeButton.disabled = true;
  dataChannelSend.value = '';
  dataChannelReceive.value = '';
  dataChannelSend.disabled = true;
  disableSendButton();
  enableStartButton();
} 
  
     
      function enableStartButton() {
  startButtonB.disabled = false;
}
function disableSendButton() {
  sendButton.disabled = true;
}
    
  
      function SEND(name,swap)
{ 
  SwapArea.value="["+swap+"]";
}
        function CLEAN()
{ 
SwapArea.innerHTML="";
}
      var iceread=0;
      function UPDATEice()
      {
      iceread=1;
      UPDATE();
      }

    function UPDATE()
{
 
       var json = JSON.parse(SwapArea.value);
  console.log(json);
    var i=0;
      for(i in json){
        var sdpice = json[i];

      console.log(sdpice);
    
            //如果是一个ICE的候选，则将其加入到PeerConnection中，否则设定对方的session描述为传递过来的描述
        if( sdpice.event === "of_ice_candidate" && iceread ==1){//iceread =3;
                                                                     console.log('onmessage: ',sdpice.event);
                  pc.addIceCandidate(new RTCIceCandidate(sdpice.data.candidate)).then(
 onAddIceCandidateSuccess,
      onAddIceCandidateError
    );
            } else if( sdpice.event === "_offer" && iceread ==0 ) {iceread =1;
              console.log('onmessage: ',sdpice.event);
                 pc.setRemoteDescription(new RTCSessionDescription(sdpice.data.sdp));
   pc.createAnswer(sendAnswerFn, function (error) {
                        console.log('Failure callback: ' + error);
                    });
      
            }
 }
    
  } 
      
    </script>
</body>
</html>